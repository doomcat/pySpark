pySpark - simple python libraries used for rapid development of virtual RoboCup
(SimSpark) agents.

Whilst SimSpark server (rcssserver3d) is easy enough to communicate with over
TCP/UDP, we had to jump over undocumented hurdles just to create a working agent
that could interact with the rest of the simulated environment.

Simple things such as sending commands to the server in the right binary
format (length + string) were either undocumented or very vaguely documented.

For this reason, we've decided to release our simple python libraries on
GitHub, so that other people can develop for RoboCup events easily in Python.

-------------------------------------------------------------------------------
pySpark v1, Owain Jones <tehdoomcat@gmail.com>
-------------------------------------------------------------------------------

INSTALLATION/USAGE GUIDE
I have yet to start using distutils or setup.py, or even format the scripts
with docstrings (or generate documentation), but using the libs should be
easy enough.

net.py		- low-level networking; requires socket and threading python
			libraries.

bot.py		- simple class for creating virtual agents.

net-test.py	- example of how to use net.py. user can send raw s-statements
			to the simspark server.

maps.py		- map joytstick buttons/axes (or other pygame events) to bot
			actions.

main.py		- make something useful out of the libs - this spawns a bot that
			you can control using an Xbox360 Wireless controller.
			uses all the libraries.

motion.py 	- a library for parsing Webots .motion files, so you can use
			step-based animations in RCSS (if you're too lazy to
			implement omnidirectional walking for example ;D)

bots/		- resources for the Nao virtual bot - .motion files taken from
			the Webots demo. may need to remove them in future, but
			if you have Webots, the .motion files are already in
		"/usr/local/webots/projects/contests/robotstadium/motions/"

Simply extract these files to wherever you want to use them, and import them
as you would for any other code.
